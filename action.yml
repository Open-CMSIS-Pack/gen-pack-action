name: 'gen-pack'
description: 'Generate Open-CMSIS-Pack documentation and pack'
inputs:
  doxygen-version:
    description: 'Version of Doxygen'
    required: false
    default: 1.9.6
  doxygen-url:
    description: 'Download URL for Doxygen'
    required: false
    default: 'https://sourceforge.net/projects/doxygen/files/rel-{VERSION}/doxygen-{VERSION}.linux.bin.tar.gz/download'
  packchk-version:
    description: 'Version of PackChk'
    required: false
    default: 1.4.1
  gen-doc-script:
    description: 'Path to gen-doc script'
    required: false
  check-links-script:
    description: 'Path to check-links script [deprecated: include link checker into doc generation]'
    required: false
  doc-path:
    description: 'Path to documentation'
    required: false
  gen-pack-script:
    description: 'Path to gen-pack script'
    required: false
  gen-pack-output:
    description: 'Path to gen-pack output'
    required: false
  gh-pages-branch:
    description: 'Branch used for gh-pages deployment'
    required: false
    default: gh-pages
  gh-pages-deploy:
    description: 'Workflow used for gh-pages deployment'
    required: false
    default: gh-pages.yml
  working-directory:
    description: 'Working directory, defaults to workspace'
    required: false
    default: ${{ github.workspace }}
  cmsis-pack-root:
    description: 'CMSIS Pack root directory'
    required: false
    default: /home/runner/.cache/arm/packs
runs:
  using: "composite"
  steps:
    - name: Update release description
      if: github.event_name == 'release'
      env:
        GH_TOKEN: ${{ github.token }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        TYPE="$(git for-each-ref --format "%(objecttype)" ${GITHUB_REF})"
        CURRENT="$(gh release view ${GITHUB_REF_NAME} --json body -t "{{.body}}")"
        if [[ -z "${CURRENT}" && "${TYPE}" == "tag" ]]; then
          DESC=$(git tag -l -n99 --format "%(contents)" ${GITHUB_REF_NAME})
          gh release edit ${GITHUB_REF_NAME} -n "${DESC}"
        fi

    - name: Add release tag annotation
      if: github.event_name == 'release'
      env:
        GH_TOKEN: ${{ github.token }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        TYPE="$(git for-each-ref --format "%(objecttype)" ${GITHUB_REF})"
        DESC="$(gh release view ${GITHUB_REF_NAME} --json body -t "{{.body}}")"
        if [[ -n "${DESC}" && "${TYPE}" == "commit" ]]; then
          export GIT_COMMITTER_NAME="$(git tag -l --format "%(committername)" ${GITHUB_REF_NAME})"
          export GIT_COMMITTER_EMAIL="$(git tag -l --format "%(committeremail)" ${GITHUB_REF_NAME})"
          export GIT_COMMITTER_DATE="$(gh release view ${GITHUB_REF_NAME} --json publishedAt -t "{{.publishedAt}}")"
          git tag ${GITHUB_REF_NAME} ${GITHUB_REF_NAME}^{} -f -a -m "${DESC}"
          git push --force origin ${GITHUB_REF_NAME}:${GITHUB_REF_NAME}
        fi

    - name: Install packages
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install --no-install-recommends -y p7zip libxml2-utils dos2unix
        sudo pip install LinkChecker

    - name: Cache Doxygen ${{ inputs.doxygen-version }}
      if: inputs.doxygen-version != 'none'
      id: cache-doxygen
      uses: actions/cache@v4
      with:
        path: /opt/doxygen-${{ inputs.doxygen-version }}
        key: doxygen-${{ inputs.doxygen-version }}-${{ runner.os }}

    - name: Download Doxygen ${{ inputs.doxygen-version }}
      if: inputs.doxygen-version != 'none' && steps.cache-doxygen.outputs.cache-hit != 'true'
      shell: bash
      run: |
        wget -O doxygen.tgz $(sed -e 's/{VERSION}/${{ inputs.doxygen-version }}/g' <<< ${{ inputs.doxygen-url }})
        sudo tar -C /opt -xf doxygen.tgz

    - name: Install Doxygen ${{ inputs.doxygen-version }}
      if: inputs.doxygen-version != 'none'
      shell: bash
      run: |
        sudo ln -s /opt/doxygen-${{ inputs.doxygen-version }}/bin/doxygen /usr/local/bin/
        which doxygen
        doxygen --version

    - name: Install PackChk ${{ inputs.packchk-version }}
      shell: bash
      run: |
        SUFFIX="-linux-amd64.tbz2"
        if [[ "${{ inputs.packchk-version }}" =~ ^([0-9]+)\.([0-9]+)(\.([0-9]+))(-.+)?$ ]]; then
            if [[ ${BASH_REMATCH[1]} == 1 && ${BASH_REMATCH[2]} == 3 ]]; then
                if [ ${BASH_REMATCH[4]} -le 96 ]; then
                    SUFFIX="-linux64.zip"
                elif [ ${BASH_REMATCH[4]} -le 98 ]; then
                    SUFFIX="-linux64-amd64.tbz2"
                fi
            fi
        fi
        ARCHIVE="packchk-${{ inputs.packchk-version }}${SUFFIX}"
        wget https://github.com/Open-CMSIS-Pack/devtools/releases/download/tools%2Fpackchk%2F${{ inputs.packchk-version }}/${ARCHIVE}
        if [[ "${ARCHIVE##*.}" == "zip" ]]; then
          unzip ${ARCHIVE}
        else
          tar xf ${ARCHIVE}
        fi
        sudo mv packchk /usr/local/bin
        which packchk
        packchk --version

    - name: Generate doxygen
      if: inputs.gen-doc-script
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "::add-matcher::${{ github.action_path }}/doxygen.json"
        echo "::add-matcher::${{ github.action_path }}/linkchecker.json"
        ${{ inputs.gen-doc-script }}
        echo "::remove-matcher owner=doxygen::"
        echo "::remove-matcher owner=linkchecker::"

    - name: Generate pack
      if: inputs.gen-pack-script
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        GH_TOKEN: ${{ github.token }}
        CMSIS_PACK_ROOT: ${{ inputs.cmsis-pack-root }}
      run: |
        if [ -d "${CMSIS_PACK_ROOT}" ] && [ ! -w "${CMSIS_PACK_ROOT}" ]; then
          chmod -R u+w "${CMSIS_PACK_ROOT}"
        fi
        mkdir -p "${CMSIS_PACK_ROOT}/.Web"
        wget -O "${CMSIS_PACK_ROOT}/.Web/ARM.CMSIS.pdsc" https://www.keil.com/pack/ARM.CMSIS.pdsc
        
        echo "::add-matcher::${{ github.action_path }}/doxygen.json"
        echo "::add-matcher::${{ github.action_path }}/linkchecker.json"
        echo "::add-matcher::${{ github.action_path }}/packchk.json"
        
        ${{ inputs.gen-pack-script }}

        echo "::remove-matcher owner=packchk::"
        echo "::remove-matcher owner=doxygen::"
        echo "::remove-matcher owner=linkchecker::"

    - name: Archive pack
      if: inputs.gen-pack-output && github.event_name != 'release'
      uses: actions/upload-artifact@v4
      with:
        path: ${{ inputs.working-directory }}/${{ inputs.gen-pack-output }}/*.pack
        retention-days: 1
        if-no-files-found: error

    - name: Attach pack to release assets
      if: inputs.gen-pack-output && github.event_name == 'release'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ github.token }}
        file_glob: true
        file: ${{ inputs.working-directory }}/${{ inputs.gen-pack-output }}/*.pack
        tag: ${{ github.ref }}
        overwrite: true

    - name: Run linkchecker
      if: inputs.check-links-script
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "::warning:: check-links-script input of gen-pack-action is deprecated!"
        echo "::warning:: Integrate link checker into gen-doc script instead."
        echo "::add-matcher::${{ github.action_path }}/linkchecker.json"
        ${{ inputs.check-links-script }}
        echo "::remove-matcher owner=linkchecker::"

    - name: Archive documentation
      if: inputs.doc-path && github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: ${{ inputs.working-directory }}/${{ inputs.doc-path }}
        retention-days: 1
        if-no-files-found: error

    - name: Archive documentation
      if: inputs.doc-path && (github.event_name == 'release' || github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        tar -cvjf /tmp/doc.tbz2 -C ${{ inputs.doc-path }} .

    - name: Check branch ${{ inputs.gh-pages-branch }}
      if: inputs.doc-path && inputs.gh-pages-branch && (github.event_name == 'release' || github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      id: check-gh-pages-branch
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        if git rev-parse --verify origin/${{ inputs.gh-pages-branch }} 1>/dev/null 2>&1; then
          echo "RESULT=true" >> "${GITHUB_OUTPUT}"
        else
          echo "::error:: Git branch ${{ inputs.gh-pages-branch }} does not exist. Skipping documentation deployment!"
          echo "::notice::Please create an orphaned target branch for the documentation deployment: "
          echo "::notice:: > git checkout --orphan  ${{ inputs.gh-pages-branch }}"
          echo "::notice:: > git rm -rf --cached ."
          echo "::notice:: > git add .github/workflows/gh-pages.yml"
          echo "::notice:: > git commit -m 'Initial gh-pages branch'"
          echo "RESULT=false" >> "${GITHUB_OUTPUT}"
        fi        

    - uses: actions/checkout@v4
      if: steps.check-gh-pages-branch.outputs.RESULT == 'true' && inputs.doc-path && inputs.gh-pages-branch && (github.event_name == 'release' || github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      with:
        path: ${{ inputs.working-directory }}
        ref: ${{ inputs.gh-pages-branch }}

    - name: Publish documentation
      if: steps.check-gh-pages-branch.outputs.RESULT == 'true' && inputs.doc-path && inputs.gh-pages-branch && (github.event_name == 'release' || github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        rm -rf ${GITHUB_REF_NAME}
        mkdir -p ${GITHUB_REF_NAME}
        tar -xvjf /tmp/doc.tbz2 -C ${GITHUB_REF_NAME}
        if ${{ github.event_name == 'release' }}; then
          rm -f latest
          ln -s ${GITHUB_REF_NAME} latest
          MSG="release"
        else
          MSG="branch"
        fi
        if [ -x update_versions.sh ]; then
          ./update_versions.sh
        else
          ${{ github.action_path }}/publish-doc/update_versions.sh
        fi
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add .
        git commit -m "Update documentation for ${MSG} ${GITHUB_REF_NAME}"
        git push

    - uses: actions/checkout@v4
      if: steps.check-gh-pages-branch.outputs.RESULT == 'true' && inputs.doc-path && inputs.gh-pages-branch && (github.event_name == 'release' || github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      with:
        path: ${{ inputs.working-directory }}
        ref: ${{ github.ref }}

    - name: Trigger GH-Pages deployment
      if: steps.check-gh-pages-branch.outputs.RESULT == 'true' && inputs.doc-path && inputs.gh-pages-branch && inputs.gh-pages-deploy && (github.event_name == 'release' || github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh workflow run ${{ inputs.gh-pages-deploy }} --ref ${{ inputs.gh-pages-branch }}
        if [ $? -ne 0 ]; then
          echo "::notice::Failed to trigger GH-Pages deployment via workflow '${{ inputs.gh-pages-deploy }}'. Configure workflow via 'gh-pages-deploy' input parameter, set empty to disable."
        fi
